// -------------------------------------------
// 			- Size in Rust
// 				- Sized Types
//				- Unsized Types
// -------------------------------------------
use std::mem::size_of;
trait Some_trait {}
fn main() {
    // Sized Types
    println!("i32 size is: {}", size_of::<i32>());
    println!("(i32,i32) size is: {}", size_of::<(i32, i32)>());
    println!("[i32: 3] size is: {}", size_of::<[i32; 3]>());

    struct Point {
        x: bool,
        y: i64,
    }
    println!("Struct size is: {}", size_of::<Point>());
    println!("i32 reference is: {}", size_of::<&i32>());
    println!("i32 mutable reference is: {}", size_of::<&mut i32>());
    println!("Machine word size is: {}", size_of::<&()>());
    println!("Box<i32> is: {}", size_of::<Box<i32>>());
    println!("fn(i32) -> i32 is: {}", size_of::<fn(i32) -> i32>());

    // Unsized Types
    println!("[i32] size is: {}", size_of::<&[i32]>());
    let a: [i32; 3];
    //println!("str size is: {}", size_of::<str>());
    println!(
        "The size of the trait object is: {}",
        size_of::<&dyn Some_trait>()
    );
}



// -------------------------------------------
// 		- Pointers to Sized vs Unsized Types
// -------------------------------------------

use std::mem::size_of;
trait Shape {
    fn print(&self);
}

#[derive(Debug)]
struct Circle;

#[derive(Debug)]
struct Rectangle;

impl Shape for Circle {
    fn print(&self) {
        println!("{:?}", self);
    }
}

impl Shape for Rectangle {
    fn print(&self) {
        println!("{:?}", self);
    }
}
fn main() {
    println!(
        "Size of a reference to sized type: {}",
        size_of::<&[i32; 3]>()
    );
    println!(
        "Size of a reference to unsized type: {}",
        size_of::<&[i32]>()
    );

    let num_1: &[i32; 3] = &[10, 12, 30];
    let num_2: &[i32] = &[10, 12, 30];

    let mut sum = 0;
    for num in num_1 {
        sum += num;
    }

    for num in num_2 {
        sum += num;
    }

    println!("Size of &Cricle is: {}", size_of::<&Circle>());
    println!("Size of &Rectangle is: {}", size_of::<&Rectangle>());
    println!("Size of &dyn Shape: {}", size_of::<&dyn Shape>());
}



