// -------------------------------------------
// 	        thiserror
// -------------------------------------------

use core::fmt;
use std::fs::File;
use std::io::{Error, Read};
use std::num::ParseIntError;
use thiserror::Error;

#[derive(Debug, Error)]
enum AppError {
    #[error("I/O Error:")]
    Io(#[from] std::io::Error),

    #[error("Prase Error:")]
    Parse(#[from] ParseIntError),
}

// impl fmt::Display for AppError {
//     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
//         // Result<(), fmt::Error>
//         match self {
//             AppError::Io(e) => write!(f, "I/O Error: {}", e),
//             AppError::Parse(e) => write!(f, "Parse Error: {}", e),
//         }
//     }
// }
// impl From<Error> for AppError {
//     fn from(err: Error) -> AppError {
//         AppError::Io(err)
//     }
// }

// impl From<ParseIntError> for AppError {
//     fn from(err: ParseIntError) -> AppError {
//         AppError::Parse(err)
//     }
// }

fn read_and_parse_number(file_path: String) -> Result<i32, AppError> {
    let mut file = File::open(file_path)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;

    let number = contents.trim().parse::<i32>()?;
    Ok(number)
}

fn main() {
    let file = String::from("number.txt");
    match read_and_parse_number(file) {
        Ok(number) => println!("File contains number: {}", number),
        Err(e) => {
            println!("{:?}", e);
            match e {
                AppError::Io(err) => std::process::exit(1),
                AppError::Parse(err) => std::process::exit(2),
            }
        }
    }
}

/*
anyhow                                          || thiserror
Application-level error handling                || Library-level error definitions
Single catch-all (anyhow::Error)                || Custom typed errors (usually enum)
Can not match on specific types after wrapping  || Matching in specific error types are possible
provides context(), with_context() to add       || attributes attachment, #[error("...")]
information dynamically at runtime              ||
*/