// -------------------------------------------
// 	        Downcasting (use case)
// -------------------------------------------
use std::any::Any;
trait Event: Any {}

struct MouseEvent {
    x: i32,
    y: i32,
}

struct KeyBoardEvent {
    key: char,
}

impl Event for MouseEvent {}
impl Event for KeyBoardEvent {}

fn handle_event(event: &dyn Any) {
    if let Some(mouse) = event.downcast_ref::<MouseEvent>() {
        println!("Mouse event at ({}, {})", mouse.x, mouse.y);
    } else if let Some(keyboard) = event.downcast_ref::<KeyBoardEvent>() {
        println!("Keyboard event, with key pressed: {}", keyboard.key);
    } else {
        println!("Unknown event");
    }
}
fn main() {
    let mouse_event = MouseEvent { x: 100, y: 200 };
    let keyboard_event = KeyBoardEvent { key: 'A' };

    handle_event(&mouse_event);
    handle_event(&keyboard_event);
}
