// -------------------------------------------
// 	        Pattern Matching Contexts
// -------------------------------------------

// Value: The thing you are trying to match against
// Pattern: The shape or structure you are matching
fn main() {
    // 1. Match Expression
    let x = 3;
    match x {
        1 => println!("One"),
        2 => println!("Two"),
        3 => println!("Three"),
        _ => println!("Something Else"),
    }

    // Value: x
    // Pattern: 1,2,3,_

    // 2. If let
    let x = 3;
    if let 5 = x {
        // if x == 5
        println!("Matched Five");
    }

    // Value: x
    // Pattern: 5

    if let x = 5 {
        // let x = 5
        println!("This always run");
        println!("x: inner {x}");
    }

    println!("x: outer {x}");

    // Binding Pattern
    // Value: Concrete value
    // Pattern: Variable

    // 3. while let
    let numbers = vec![1, 2, 2, 3, 2, 0];
    let mut i = 0;

    while let 2 = numbers[i] {
        println!("Found a value 2 at index: {}", i);
        i += 1;
    }

    // Value: number[i]
    // Pattern: 2

    // 4. let binding
    let (a, b) = (10, 20);

    // Value: (10, 20)
    // Pattern: (a, b)

    // 5. Function Parameters
    let point = (5, 8);
    print_coords(point);

    // Value: (5, 8)
    // Pattern: (x, y)
    // Type: (i32, i32)
}

fn print_coords((x, y): (i32, i32)) {
    println!("x: {x}, y: {y}");
}
