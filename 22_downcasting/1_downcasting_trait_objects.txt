// -------------------------------------------
// 	        Downcasting Trait Objects
// -------------------------------------------

// &dyn trait or &mut dyn trait -> concrete type
use std::any::Any;

trait Animal {
    fn make_sound(&self);
    // fn as_any(&self) -> &dyn Any;
    // fn as_mut_any(&mut self) -> &mut dyn Any;
}

struct Dog;
struct Cat;

impl Animal for Dog {
    fn make_sound(&self) {
        println!("Woof!");
    }

    // fn as_any(&self) -> &dyn Any {
    //     self
    // }

    // fn as_mut_any(&mut self) -> &mut dyn Any {
    //     self
    // }
}

impl Animal for Cat {
    fn make_sound(&self) {
        println!("Meow!");
    }

    // fn as_any(&self) -> &dyn Any {
    //     self
    // }

    // fn as_mut_any(&mut self) -> &mut dyn Any {
    //     self
    // }
}

fn identity_and_make_sound(animal: &mut dyn Any) {
    if let Some(dog) = animal.downcast_mut::<Dog>() {
        println!("It's a Dog");
        dog.make_sound();
    } else if let Some(cat) = animal.downcast_ref::<Cat>() {
        println!("It's a Cat");
        cat.make_sound();
    } else {
        println!("Unknown animal");
    }
}
fn main() {
    let mut dog = Dog;
    let mut cat = Cat;
    let dog = &mut dog as &mut dyn Any;
    let cat = &mut cat as &mut dyn Any;
    let animals: Vec<&mut dyn Any> = vec![dog, cat];

    for animal in animals {
        identity_and_make_sound(animal);
    }
}
