// ------------------------------------------------------
// 	 Checking type without Downcasting using TypeId
// ------------------------------------------------------
use std::any::{Any, TypeId};

fn check_type<T: Any>(value: &T) {
    if value.type_id() == TypeId::of::<i32>() {
        println!("The type is i32.");
    } else if value.type_id() == TypeId::of::<String>() {
        println!("The type is String.");
    } else {
        println!("Unknown type.");
    }
}
fn main() {
    // Simulating values at runtime
    let num = 42;
    let text = String::from("Hello");
}
