// -------------------------------------------
// 	        Trait Objects Limitations
// 			    1. Multiple Traits
//              2. Associated Types
//              3. Methods with Generics
// -------------------------------------------
trait DrawableWithGenericFn {
    fn draw_with_generic<T: std::fmt::Debug>(&self, color: T);
}

struct Circle {
    x: f64,
    y: f64,
    radius: f64,
}
impl DrawableWithGenericFn for Circle {
    fn draw_with_generic<T: std::fmt::Debug>(&self, color: T) {
        println!(
            "Drawing a circle at ({}, {}), having radius {}, with color {:?}",
            self.x, self.y, self.radius, color
        );
    }

    // vtable of DrawableWithGenericFn for Circle (which method to point to. draw_with_generic_str or draw_with_generic_tuple)
    // fn draw_with_generic_str<T: std::fmt::Debug>(&self, color: T) {
    //     println!(
    //         "Drawing a circle at ({}, {}), having radius {}, with color {:?}",
    //         self.x, self.y, self.radius, color
    //     );
    // }
    // fn draw_with_generic_tuple<T: std::fmt::Debug>(&self, color: T) {
    //     println!(
    //         "Drawing a circle at ({}, {}), having radius {}, with color {:?}",
    //         self.x, self.y, self.radius, color
    //     );
    // }
}


trait GenericDrawable<T: std::fmt::Debug> {
    fn draw(&self, color: T);
}
impl<T: std::fmt::Debug> GenericDrawable<T> for Circle {
    fn draw(&self, color: T) {
        println!(
            "Drawing a circle at ({}, {}), having raduis {} with color {:?}",
            self.x, self.y, self.radius, color
        );
    }
}

// impl GenericDrawable<&str> for Circle {
//     fn draw(&self, color: T) {
//         println!(
//             "Drawing a circle at ({}, {}), having raduis {} with color {:?}",
//             self.x, self.y, self.radius, color
//         );
//     }
// }

// impl GenericDrawable<(i32, i32, i32)> for Circle {
//     fn draw(&self, color: T) {
//         println!(
//             "Drawing a circle at ({}, {}), having raduis {} with color {:?}",
//             self.x, self.y, self.radius, color
//         );
//     }
// }

// vtable 1: GenericDrawable<&str> for Circle
// vtable 2: GenericDrawable<(i32,i32,i32)> for Circle


fn draw<T: std::fmt::Debug>(obj: &dyn GenericDrawable<T>, color: T) {
    obj.draw(color);
}

// fn draw_str<T: std::fmt::Debug>(obj: &dyn GenericDrawable<T>, color: T) {
//     obj.draw(color);
// }

// fn draw_tuple<T: std::fmt::Debug>(obj: &dyn GenericDrawable<T>, color: T) {
//     obj.draw(color);
// }

fn main() {
    let circle_1 = Circle {
        x: 0.0,
        y: 0.0,
        radius: 5.0,
    };

    let circle_2 = Circle {
        x: 10.0,
        y: 10.0,
        radius: 2.0,
    };
    draw(&circle_1, "red");
    draw(&circle_2, (255, 0, 0));
}
