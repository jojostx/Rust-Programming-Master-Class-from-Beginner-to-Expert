// -------------------------------------------
// 	        Trait Objects Limitations
// 			    1. Multiple Traits
//              2. Associated Types
//              3. Methods with Generics
//              4. Functions with no Self Parameter
// -------------------------------------------

trait Drawable {
    fn no_self()
    where
        Self: Sized,
    {
    }
    fn generic_fn<T>(&self, generic: T)
    where
        Self: Sized,
    {
    }
    fn draw(&self);
}
struct Circle {
    x: f64,
    y: f64,
    radius: f64,
}
struct Square {
    x: f64,
    y: f64,
    side: f64,
}
impl Drawable for Circle {
    fn draw(&self) {
        println!(
            "Drawing a circle at ({}, {}), radius {}",
            self.x, self.y, self.radius
        );
    }
    fn no_self() {
        print!("no_self() for Circle");
    }
}
impl Drawable for Square {
    fn draw(&self) {
        println!(
            "Drawing a square at ({}, {}), side {}",
            self.x, self.y, self.side
        );
    }
    fn no_self() {
        print!("no_self() for Square");
    }
}
fn draw(obj: &dyn Drawable) {
    // obj.no_self();
    // (dyn Drawable)::no_self(); // trait objects -> type is erased -> no type for dyn Drawable
    Circle::no_self();
    Square::no_self();
    // Drawable::no_self(); // not allowed
}
fn main() {}
-------------------------------------------
// 	        Trait Objects Limitations
// 			    1. Multiple Traits
//              2. Associated Types
//              3. Methods with Generics
//              4. Functions with no Self Parameter
// -------------------------------------------

trait Drawable {
    fn draw(&self);
    // fn no_self();
    // fn no_self() {}
    fn no_self()
    where
        Self: Sized,
    {
    }

    fn generic_fn<T>(&self, generic: T)
    // add sized later on by by writting 
    // where
    //     Self: Sized,
    {
    }
}

struct Circle {
    x: f64,
    y: f64,
    radius: f64,
}

struct Square {
    x: f64,
    y: f64,
    side: f64,
}

impl Drawable for Circle {
    fn draw(&self) {
        println!(
            "Drawing a circle at ({}, {}), radius {}",
            self.x, self.y, self.radius
        );
    }
    fn no_self() {
        println!("no_self() for Circle");
    }
}

impl Drawable for Square {
    fn draw(&self) {
        println!(
            "Drawing a square at ({}, {}), side {}",
            self.x, self.y, self.side
        );
    }
    fn no_self() {
        println!("no_self() for Square");
    }
}

fn draw(obj: &dyn Drawable) {
    // obj.no_self();
    // (dyn Drawable)::no_self(); //type erased

    Circle::no_self();
    Square::no_self();
    //Drawable::no_self(); // not allowed
}
fn main() {}
