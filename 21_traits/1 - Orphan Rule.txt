x// -------------------------------------------
// 	        Orphan Rule
// -------------------------------------------

use rust_course::{Addition, Point, Printable};

struct PointWrapper(Point);
impl Printable for PointWrapper {
    fn print(&self) {
        println!("x-axis: {}, y-axis: {}", self.0.x, self.0.y);
    }
}

// impl Addition<Point, Point> for Point {
//     fn add(self, rhs: Point) -> Point {
//         Point {
//             x: self.x + rhs.x,
//             y: self.y + rhs.y,
//         }
//     }
// }

struct Line {
    start: Point,
    end: Point,
}

impl Addition<Point, Line> for Point {
    fn add(self, rhs: Point) -> Line {
        Line {
            start: self,
            end: rhs,
        }
    }
}

impl Addition<i32, i32> for i32 {}
fn main() {}




// Code in library 
pub struct Point {
    pub x: i32,
    pub y: i32,
}

pub trait Printable {
    fn print(&self);
}

pub trait Addition<T, U> {
    fn add(self, rhs: T) -> U;
}
